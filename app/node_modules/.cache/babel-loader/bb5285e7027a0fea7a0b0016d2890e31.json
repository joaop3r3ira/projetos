{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { MagicIncomingWindowMessage } from '@magic-sdk/types';\nimport { JsonRpcResponse } from './json-rpc';\nimport { createAutoCatchingPromise } from '../util/promise-tools';\n/**\n * Get the originating payload from a batch request using the specified `id`.\n */\n\nfunction getRequestPayloadFromBatch(requestPayload, id) {\n  return id && Array.isArray(requestPayload) ? requestPayload.find(function (p) {\n    return p.id === id;\n  }) : requestPayload;\n}\n/**\n * Ensures the incoming response follows the expected schema and parses for a\n * JSON RPC payload ID.\n */\n\n\nfunction standardizeResponse(requestPayload, event) {\n  var _a;\n\n  var id = (_a = event.data.response) === null || _a === void 0 ? void 0 : _a.id;\n  var requestPayloadResolved = getRequestPayloadFromBatch(requestPayload, id);\n\n  if (id && requestPayloadResolved) {\n    // Build a standardized response object\n    var response = new JsonRpcResponse(requestPayloadResolved).applyResult(event.data.response.result).applyError(event.data.response.error);\n    return {\n      id: id,\n      response: response\n    };\n  }\n\n  return {};\n}\n\nvar PayloadTransport =\n/** @class */\nfunction () {\n  /**\n   * Create an instance of `PayloadTransport`\n   *\n   * @param overlay - The `IframeController` context to which the event will be\n   * posted.\n   * @param endpoint - The URL for the relevant iframe context.\n   * @param encodedQueryParams - The unique, encoded query parameters for the\n   * relevant iframe context.\n   */\n  function PayloadTransport(endpoint, encodedQueryParams) {\n    this.endpoint = endpoint;\n    this.encodedQueryParams = encodedQueryParams;\n    this.messageHandlers = new Set();\n    this.init();\n  }\n\n  PayloadTransport.prototype.post = function (overlay, msgType, payload) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , createAutoCatchingPromise(function (resolve) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var batchData, batchIds, acknowledgeResponse, removeResponseListener;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  return [4\n                  /*yield*/\n                  , overlay.ready];\n\n                case 1:\n                  _a.sent();\n\n                  batchData = [];\n                  batchIds = Array.isArray(payload) ? payload.map(function (p) {\n                    return p.id;\n                  }) : [];\n                  return [4\n                  /*yield*/\n                  , overlay.postMessage({\n                    msgType: msgType + \"-\" + this.encodedQueryParams,\n                    payload: payload\n                  })];\n\n                case 2:\n                  _a.sent();\n\n                  acknowledgeResponse = function (removeEventListener) {\n                    return function (event) {\n                      var _a = standardizeResponse(payload, event),\n                          id = _a.id,\n                          response = _a.response;\n\n                      if (id && response && Array.isArray(payload) && batchIds.includes(id)) {\n                        batchData.push(response); // For batch requests, we wait for all responses before resolving.\n\n                        if (batchData.length === payload.length) {\n                          removeEventListener();\n                          resolve(batchData);\n                        }\n                      } else if (id && response && !Array.isArray(payload) && id === payload.id) {\n                        removeEventListener();\n                        resolve(response);\n                      }\n                    };\n                  };\n\n                  removeResponseListener = this.on(MagicIncomingWindowMessage.MAGIC_HANDLE_RESPONSE, acknowledgeResponse(function () {\n                    return removeResponseListener();\n                  }));\n                  return [2\n                  /*return*/\n                  ];\n              }\n            });\n          });\n        })];\n      });\n    });\n  };\n  /**\n   * Listen for events received with the given `msgType`.\n   *\n   * @param msgType - The `msgType` encoded with the event data.\n   * @param handler - A handler function to execute on each event received.\n   * @return A `void` function to remove the attached event.\n   */\n\n\n  PayloadTransport.prototype.on = function (msgType, handler) {\n    var _this = this;\n\n    var boundHandler = handler.bind(window); // We cannot effectively cover this function because it never gets reference\n    // by value. The functionality of this callback is tested within\n    // `initMessageListener`.\n\n    /* istanbul ignore next */\n\n    var listener = function (event) {\n      if (event.data.msgType === msgType + \"-\" + _this.encodedQueryParams) boundHandler(event);\n    };\n\n    this.messageHandlers.add(listener);\n    return function () {\n      return _this.messageHandlers.delete(listener);\n    };\n  };\n\n  return PayloadTransport;\n}();\n\nexport { PayloadTransport };","map":{"version":3,"sources":["../../../src/core/payload-transport.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { MagicIncomingWindowMessage, } from '@magic-sdk/types';\nimport { JsonRpcResponse } from './json-rpc';\nimport { createAutoCatchingPromise } from '../util/promise-tools';\n/**\n * Get the originating payload from a batch request using the specified `id`.\n */\nfunction getRequestPayloadFromBatch(requestPayload, id) {\n    return id && Array.isArray(requestPayload)\n        ? requestPayload.find(function (p) { return p.id === id; })\n        : requestPayload;\n}\n/**\n * Ensures the incoming response follows the expected schema and parses for a\n * JSON RPC payload ID.\n */\nfunction standardizeResponse(requestPayload, event) {\n    var _a;\n    var id = (_a = event.data.response) === null || _a === void 0 ? void 0 : _a.id;\n    var requestPayloadResolved = getRequestPayloadFromBatch(requestPayload, id);\n    if (id && requestPayloadResolved) {\n        // Build a standardized response object\n        var response = new JsonRpcResponse(requestPayloadResolved)\n            .applyResult(event.data.response.result)\n            .applyError(event.data.response.error);\n        return { id: id, response: response };\n    }\n    return {};\n}\nvar PayloadTransport = /** @class */ (function () {\n    /**\n     * Create an instance of `PayloadTransport`\n     *\n     * @param overlay - The `IframeController` context to which the event will be\n     * posted.\n     * @param endpoint - The URL for the relevant iframe context.\n     * @param encodedQueryParams - The unique, encoded query parameters for the\n     * relevant iframe context.\n     */\n    function PayloadTransport(endpoint, encodedQueryParams) {\n        this.endpoint = endpoint;\n        this.encodedQueryParams = encodedQueryParams;\n        this.messageHandlers = new Set();\n        this.init();\n    }\n    PayloadTransport.prototype.post = function (overlay, msgType, payload) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                return [2 /*return*/, createAutoCatchingPromise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {\n                        var batchData, batchIds, acknowledgeResponse, removeResponseListener;\n                        return __generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0: return [4 /*yield*/, overlay.ready];\n                                case 1:\n                                    _a.sent();\n                                    batchData = [];\n                                    batchIds = Array.isArray(payload) ? payload.map(function (p) { return p.id; }) : [];\n                                    return [4 /*yield*/, overlay.postMessage({ msgType: msgType + \"-\" + this.encodedQueryParams, payload: payload })];\n                                case 2:\n                                    _a.sent();\n                                    acknowledgeResponse = function (removeEventListener) { return function (event) {\n                                        var _a = standardizeResponse(payload, event), id = _a.id, response = _a.response;\n                                        if (id && response && Array.isArray(payload) && batchIds.includes(id)) {\n                                            batchData.push(response);\n                                            // For batch requests, we wait for all responses before resolving.\n                                            if (batchData.length === payload.length) {\n                                                removeEventListener();\n                                                resolve(batchData);\n                                            }\n                                        }\n                                        else if (id && response && !Array.isArray(payload) && id === payload.id) {\n                                            removeEventListener();\n                                            resolve(response);\n                                        }\n                                    }; };\n                                    removeResponseListener = this.on(MagicIncomingWindowMessage.MAGIC_HANDLE_RESPONSE, acknowledgeResponse(function () { return removeResponseListener(); }));\n                                    return [2 /*return*/];\n                            }\n                        });\n                    }); })];\n            });\n        });\n    };\n    /**\n     * Listen for events received with the given `msgType`.\n     *\n     * @param msgType - The `msgType` encoded with the event data.\n     * @param handler - A handler function to execute on each event received.\n     * @return A `void` function to remove the attached event.\n     */\n    PayloadTransport.prototype.on = function (msgType, handler) {\n        var _this = this;\n        var boundHandler = handler.bind(window);\n        // We cannot effectively cover this function because it never gets reference\n        // by value. The functionality of this callback is tested within\n        // `initMessageListener`.\n        /* istanbul ignore next */\n        var listener = function (event) {\n            if (event.data.msgType === msgType + \"-\" + _this.encodedQueryParams)\n                boundHandler(event);\n        };\n        this.messageHandlers.add(listener);\n        return function () { return _this.messageHandlers.delete(listener); };\n    };\n    return PayloadTransport;\n}());\nexport { PayloadTransport };\n//# sourceMappingURL=payload-transport.js.map"]},"metadata":{},"sourceType":"module"}